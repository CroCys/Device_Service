server:
  port: 8080

spring:
  application:
    name: Device Service

  # Конфигурация источника данных
  datasource:
    url: jdbc:postgresql://localhost:5432/devices_db
    username: admin
    password: ggD3v1c3
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5  # Достаточно для разработки
      minimum-idle: 1       # Экономия ресурсов
      idle-timeout: 30000
      connection-timeout: 30000
      max-lifetime: 60000
      leak-detection-threshold: 15000

  # Конфигурация JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: update    # Для dev удобно использовать автоматическое обновление схемы
    show-sql: true        # Показываем SQL для отладки
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true  # Форматированный SQL в логах
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Конфигурация Redis
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000
      password: ggD3v1c3

  # Конфигурация кеша
  cache:
    type: redis

  # Конфигурация безопасности - можно отключить для разработки
  security:
    # Пример настройки для облегчения разработки
    # Используйте только для dev-окружения!
    basic:
      enabled: false  # Отключение базовой аутентификации для удобства разработки

# Конфигурация MinIO
minio:
  endpoint: http://localhost:9000
  accessKey: admin
  secretKey: ggD3v1c3
  bucket: images

# Настройки логирования
logging:
  level:
    root: INFO
    vadim: DEBUG  # Ваш основной пакет - более подробное логирование
    org.springframework.security: DEBUG  # Логи безопасности для отладки
    org.hibernate.SQL: DEBUG  # SQL запросы
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # Параметры запросов